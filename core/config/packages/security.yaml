security:
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    #users_in_memory: { memory: null }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      anonymous: true
      json_login:
        provider: app_user_provider
        check_path: api_login_check
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    register:
      pattern: ^/api/user/create
      stateless: true
      anonymous: true
    api:
      anonymous: true
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      guard:
        authenticators:
          - dfm.jwt_token_authenticator
          #- lexik_jwt_authentication.jwt_token_authenticator

    #main:
    #  anonymous: lazy
    #  provider: users_in_memory

    # activate different ways to authenticate
    # https://symfony.com/doc/current/security.html#firewalls-authentication
    # https://symfony.com/doc/current/security/impersonating_user.html
    # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/user/create, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    #- { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
  encoders:
    App\Entity\User:
      algorithm: auto
      cost: 14
